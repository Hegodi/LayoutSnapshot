<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timerCheckWindowsOpened.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAL7G0U5bQPbwscRAAAAAElFTkSuQmCC
</value>
  </data>
</root>